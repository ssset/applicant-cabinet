version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: backend/Dockerfile
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    environment:
      - PYTHONUNBUFFERED=1
      - DJANGO_SETTINGS_MODULE=applicant.settings
    env_file:
      - .env
    depends_on:
      - db
      - redis
    expose:
      - "8000"
    command: >
      sh -c "python manage.py migrate &&
             gunicorn --bind 0.0.0.0:8000 applicant.wsgi:application"

  celery:
    build:
      context: .
      dockerfile: Dockerfile.celery
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      - redis
    command: celery -A applicant worker --loglevel=info

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.frontend
    volumes:
      - frontend_build:/usr/share/nginx/html
    expose:
      - "80"

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - .env

  redis:
    image: redis:7
    volumes:
      - redis_data:/data

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - frontend_build:/var/www/frontend
      - /etc/letsencrypt:/etc/letsencrypt:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - frontend

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  frontend_build: